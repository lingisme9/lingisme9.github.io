<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS-定位</title>
      <link href="/2020/043013442.html"/>
      <url>/2020/043013442.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><h2 id="一、定位简介"><a href="#一、定位简介" class="headerlink" title="一、定位简介"></a>一、定位简介</h2><pre><code>定位：            -更加高级的布局手段            -通过定位可以将元素任意定位            -position属性设置定位                -可选值                    -static：元素静止：                    relative：开启相对定位：参照元素在文档流中的位置                    fixed：固定定位                    absolute：绝对定位                    sticky：粘滞定位            -相对定位：当元素的position属性值设定为relative                -不设置偏移量不会发生任何变化                -提升层级                -不会脱离文档流                -不改变属性            -偏移量：offset                -相当于margin这些                    -top                    -bottom                        -通常使用一个                    -left                    -right                        -通常使用一个</code></pre><h2 id="二、绝对定位"><a href="#二、绝对定位" class="headerlink" title="二、绝对定位"></a>二、绝对定位</h2><pre><code>绝对定位：positin：absolute                -绝对定位的特点                    -开启绝对定位后：如果不设置偏移量,元素位置不会发生变化                    -开启绝对定位后会从文档流中脱离                    -绝对定位会改变元素的性质：行内变成块，块的块高被内容撑开                    -会使元素提升一个层级                    -绝对定位元素相对于其包含块惊进行定位            包含块（containing block）                -正常：离当前元素最近的祖先元素                divdivdivdiv                divspanememspandiv：em的是div                -绝对定位的包含块：就是离他最近的开启了定位的祖先元素                    -如果都没有开启定位则：相对于根元素html：初始包含块</code></pre><h2 id="三、固定定位"><a href="#三、固定定位" class="headerlink" title="三、固定定位"></a>三、固定定位</h2><pre><code>固定定位：                -position：fixed                -也是一种绝对定位，大部分和绝对定位一样                -唯一不同：固定定位永远参照于浏览器的视口定位                -固定定位的元素不会随网页的滚动而移动</code></pre><h2 id="四、粘滞定位"><a href="#四、粘滞定位" class="headerlink" title="四、粘滞定位"></a>四、粘滞定位</h2><pre><code>粘滞定位                   -position：sticky                  - 和相对定位基本一样                  -在某一位置可以固定</code></pre><h2 id="五、绝对固定定位"><a href="#五、绝对固定定位" class="headerlink" title="五、绝对固定定位"></a>五、绝对固定定位</h2><pre><code>当我们开启绝对定位后                -水平方向布局等式需要加上left，fight两个值                    -当发生过度约束，9个值都没有auto，自动调整right满足                    -如果有auto调auto            可设置auto的值                -margin width left right            因为：left，right的值默认auto                等式 不满足，默认调整right，left            垂直方向布局的等式也必须要满足：</code></pre><h2 id="六、元素层级"><a href="#六、元素层级" class="headerlink" title="六、元素层级"></a>六、元素层级</h2><pre><code>z-index:设置层级                -值越大层级越高                -不写优先靠下的                -祖先元素的层级再高也不会盖住后代</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS—布局笔记</title>
      <link href="/2020/043011415.html"/>
      <url>/2020/043011415.html</url>
      
        <content type="html"><![CDATA[<h1 id="css布局"><a href="#css布局" class="headerlink" title="css布局"></a>css布局</h1><h2 id="一、文档流"><a href="#一、文档流" class="headerlink" title="一、文档流"></a>一、文档流</h2><pre><code>文档流（normal flow）            -网页是层叠的            -通过css可以给每一层设置样式            -用户只能看到最顶上一层            -这些层中最低下一层称为文档流            -我们所创建的元素默认都是在文档流中进行排列            -对于我们元素有两个状态                -在文档流中                -脱离文档流中            在文档流中有何特点                -块元素                    -块元素独占一行                    -默认宽度：父元素撑满                    -默认高度：内容撑满                -行内元素                    -不会独占一行                    -只占自身大小                    -一行中不能容纳所有：换行                    -行内元素的默认宽度：内容撑开</code></pre><h2 id="二、盒子模型"><a href="#二、盒子模型" class="headerlink" title="二、盒子模型"></a>二、盒子模型</h2><pre><code>    盒子模型        -box model        怎么摆放元素：            -css中将页面中的元素设置成了一个矩形盒子            -设置为矩形的盒子：布局就是摆放盒子            -怎么设置大小和位置：                -组成:                    -内容区（content）                    -边框（bonder）                    -内边距（padding）：内容区和边框的距离                    -外边距（margin）：决定位置；两个盒子间的距离</code></pre><h2 id="三、盒子模型-边框"><a href="#三、盒子模型-边框" class="headerlink" title="三、盒子模型-边框"></a>三、盒子模型-边框</h2><pre><code>    边框                -boder-width:默认值3px                    -四个值：顺时针                    -三个：左等于右                    -两个值：上下，左右                    -boder-top-width                        -top，right，left，bottom，  以下都有：                -boder-color：边框颜色                    -如果不写：默认指定color值                -boder-style：边框样式                    -soild： 实线                    -dotted：点状虚线                    -dashed：虚线                    -double：双线                    -不可不写：默认值是none                     boder简写形式：同时设定，没有顺序要求                    border: 10px orange solid;</code></pre><h2 id="四、盒子模型-内边距"><a href="#四、盒子模型-内边距" class="headerlink" title="四、盒子模型-内边距"></a>四、盒子模型-内边距</h2><pre><code>  内边距（padding）              -内容区和边框间的距离              -四个方向都有                  padding-top          -************************会影响到盒子的大小              -背景颜色会延伸到内边距上          盒子大小可见框：边框+内容+内边距</code></pre><h2 id="五、盒子模型-外边距"><a href="#五、盒子模型-外边距" class="headerlink" title="五、盒子模型-外边距"></a>五、盒子模型-外边距</h2><pre><code>   外边距（margin）            -不会影响可见框大小            -会影响盒子位置            -有四个方向        元素在页面中是按自左向右的顺序排列            -左上：会移动元素自身            -下右：移别人        可以设置负值：像相反方向移动        简写：margin：四个外边距        margin：影响盒子实际大小       </code></pre><h2 id="六、水平方向的布局"><a href="#六、水平方向的布局" class="headerlink" title="六、水平方向的布局"></a>六、水平方向的布局</h2><pre><code>    水平方向的布局：            -元素在其父元素中的水平布局               margin-left               border-left               padding-left               width               padding-right               border-right               margin-right            -一个元素在其父元素中必须满足：                从左到右加起来：外边距+内边距+内容+右部分=父元素内容区的宽度            不成立：过度约束：自动调整                -调整情况                    -如果这七个值中没有auto的情况：会调整margin-right满足            三个可以设置为auto；                -width                -margin-left                -margin-right                调整auto的值            水平居中：               实例：                  width：                  margin：auto</code></pre><h2 id="七、垂直方向的布局"><a href="#七、垂直方向的布局" class="headerlink" title="七、垂直方向的布局"></a>七、垂直方向的布局</h2><pre><code>      子元素大于父元素：撑破父元素：溢出        子元素在内容区中排列：            用overflow：设置处理溢出                -visable:显示溢出                -hidden：隐藏溢出                -scroll:生成滚动条，来查看完整的内容                -auto：根据需要生成滚动条            overflow-x：水平方向            overflow-y：垂直方向     </code></pre><h2 id="八、盒子模型外边距的折叠"><a href="#八、盒子模型外边距的折叠" class="headerlink" title="八、盒子模型外边距的折叠"></a>八、盒子模型外边距的折叠</h2><pre><code>    外边距的重叠：        -相邻的垂直外边距重叠：        -兄弟元素            -两者之间取较大值，两者都是正值            -一正一负：和            -两个负：两者取绝对值较大的        -兄弟元素之间外边距的重叠对于开发有利：不需要处理        -父子元素            -父子元素间的相邻外边距：子元素会传递给父元素            -父子外边距重叠会影响页面布局：必须处理       </code></pre><h2 id="九、行内元素的盒模型"><a href="#九、行内元素的盒模型" class="headerlink" title="九、行内元素的盒模型"></a>九、行内元素的盒模型</h2><pre><code>      行内元素            -display：元素显示模式                -可选值：                    -inline：设置为行内                    -block：设置为块元素                    -inline-block:行内块元素                        -既可以设置宽高，又不会独占一行:有缺点：想文字一样有间隔                    -table：设置为表格                    -none：不在页面中显示        visibility：设置显示状态              -visible：正常显示              -hidden：隐藏：占位置,none不占    </code></pre><h2 id="十、浏览器的默认样式"><a href="#十、浏览器的默认样式" class="headerlink" title="十、浏览器的默认样式"></a>十、浏览器的默认样式</h2><pre><code> 两个文件：normal，resert</code></pre><h2 id="十一、盒子大小"><a href="#十一、盒子大小" class="headerlink" title="十一、盒子大小"></a>十一、盒子大小</h2><pre><code>     默认情况下：可见框大小：内容+内边距+边框                box-sizing：设置盒子计算方式                    -可选值：                        content-box：高度和宽度设置内容区大小                        border-box：宽度高度设置盒子可见框大小                            三个加起来的大小</code></pre><h2 id="十二、圆角和轮廓"><a href="#十二、圆角和轮廓" class="headerlink" title="十二、圆角和轮廓"></a>十二、圆角和轮廓</h2><pre><code>  outline用来设置轮廓线            -轮廓不会影响可见框的大小，border会影响            -设置鼠标移入    box-shadow：用来设置元素的阴影效果：不会影响可见框大小            -默认和盒子一样大            -需要设置偏移量：默认偏移量是0            -第一个：左侧偏移值：水平位置            -第二个：右侧偏移值：垂直位置            -第三个：阴影模糊半径            -第四个：颜色            -可以设置负值           border-radius: ;        -设置圆角            -值为圆角半径            -指定四个角：顺时针：四个值            -三个值:对角一样            -两个：            -一个            -百分数：50%：圆形      </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/2020/043085.html"/>
      <url>/2020/043085.html</url>
      
        <content type="html"><![CDATA[<h1 id="css笔记"><a href="#css笔记" class="headerlink" title="css笔记"></a>css笔记</h1><h2 id="一、css3介绍"><a href="#一、css3介绍" class="headerlink" title="一、css3介绍"></a>一、css3介绍</h2><pre><code>    网页分成三个部分：        结构：html        表现：css        行为：js    css：        -层叠样式表：页面实际上是多层结构        -设置网页元素样式     -第一种方式（内联样式，行内样式）        -在便签内部通过style来设置元素样式，属性只能在开始标签写        -多以写多个        -font-size:字体大小</code></pre><h2 id="二、编写位置"><a href="#二、编写位置" class="headerlink" title="二、编写位置"></a>二、编写位置</h2><pre><code>    内联样式只能对一个标签产生影响        -当样式发生变化需要一个一个改    注意:开发时绝对不要用内联样式     第三种方式:外部样式(最佳实践)        -可以将css样式编写到一个外部css文件中        -然后通过link标签来引用外部文件,这样意味着只要想用样式网页都可以进行引用            -href:路径     -将样式编写到css文件中可以使用到浏览器的缓存机制从而加快网页加载速度</code></pre><h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h2><pre><code>    style标签内部不属于html    css基本语法:        -p:选择器:选择元素        {}:声明块:指定要为元素设置的样式;结尾为一个            -一个样式名对应样式值:用:连接</code></pre><h2 id="四、常用选择器"><a href="#四、常用选择器" class="headerlink" title="四、常用选择器"></a>四、常用选择器</h2><pre><code>    将所有的段落设置为红色(字体)        元素选择器            -标签名            h{}        id选择器:根据元素id属性值选中一个元素            -#id属性值{}            -设置两个id也可以但是不能这么做        列子:        class:是一个标签属性,和id类似,可以重复使用            -可以通过class分组            -.为class属性            -可以同时为一个元素指定多个class        通配选择器            -所有元素            语法:*</code></pre><h2 id="五、复合选择器"><a href="#五、复合选择器" class="headerlink" title="五、复合选择器"></a>五、复合选择器</h2><pre><code>  交集选择器:选中同时满足多个条件              -作用:同时选中多个元素              -选择器1.选择器2{}          注意:如果有元素选择器,那么必须元素选择器开头              选择器分组(并集选择器)        -作用:选择多个选择器对应的元素        -语法:选择器1,选择器2{}             #b1.p1,h1,span:选择id加元素          </code></pre><h2 id="六、关系选择器"><a href="#六、关系选择器" class="headerlink" title="六、关系选择器"></a>六、关系选择器</h2><pre><code>  为div直接包含的span这只一个字体颜色红色        （为div直接包含的span设置一个字体颜色）        ******子元素选择器            作用：选中指定父元素的指定子元素            语法：父元素&gt;子元素        ******后代元素选择器                作用：选中元素的后代元素                语法：祖先 后代                 兄弟元素选择器                -先择下一个兄弟                    -语法：前一个 + 下一个：紧挨着的，隔着一个也不行                -选择下边所有的兄弟：                    -语法：兄~弟        </code></pre><h2 id="七、属性选择器"><a href="#七、属性选择器" class="headerlink" title="七、属性选择器"></a>七、属性选择器</h2><pre><code>  属性选择器            -语法【属性名】:选择含有指定属性的元素            【属性名 = 属性值】            【属性名^=属性】：选择属性值以指定值开始的元素            【属性名$= 属性值】：结尾            【属性名*=属性值】：选择含有某值的元素          </code></pre><h2 id="八、伪类选择器"><a href="#八、伪类选择器" class="headerlink" title="八、伪类选择器"></a>八、伪类选择器</h2><pre><code>  伪类：不存在的类        -描述一个元素特殊状态的第一个子元素，被点击的元素，鼠标点击的元素        -伪类一般情况下：号开头            -:first-child第一个子元素            -:last-child最后一个子元素            -:nth-child（3）选中第3个子元素                特殊值：                    n：第n个，范围全部0-&amp;                    2n；偶数个                    2n+1：奇数                    odd：奇数                    even：偶数        -以上这些伪类都是根据所有子元素排序        ：first-of-type        ：last-of-type        ：nth-of-type           -只找相同类型    否定伪类：        ：not（）：            -将符合条件的元素去除          </code></pre><h2 id="九、a元素的伪类选择器"><a href="#九、a元素的伪类选择器" class="headerlink" title="九、a元素的伪类选择器"></a>九、a元素的伪类选择器</h2><pre><code>        link：没访问过的链接        visited:访问过            -隐私问题：visited只能改颜色             -只能超链接用上面两个        hover:鼠标移入        active：鼠标点击            </code></pre><h2 id="十、伪元素选择器"><a href="#十、伪元素选择器" class="headerlink" title="十、伪元素选择器"></a>十、伪元素选择器</h2><pre><code>  伪元素        -特殊不存在的元素（特殊位置）            伪元素：：开头            ::first—letter：第一个字母            ::first-line:第一行            ::selection:表示选中内容            ::before：起始位置            ::after：元素最后                -before/after结合content使用                -套框框           p::first-letter               {                   font-size: 50px;               }               p::first-line               {                   background-color: yellowgreen;               }               p::selection               {                   color: darkmagenta;               }               div::before               {                   content: 'abc';                   color: red;               }               div::after               {                   content: 'abc';                   color:green;               }</code></pre><h2 id="十一、样式继承"><a href="#十一、样式继承" class="headerlink" title="十一、样式继承"></a>十一、样式继承</h2><pre><code>    样式的继承：给一个标签设置的样式会继承给他的后代元素            -只发生在后代里            -为了方便开发，利用继承     注意：并不是所有的样式都会被继承            -比如：背景，布局相关的</code></pre><h2 id="十二、选择器的权重"><a href="#十二、选择器的权重" class="headerlink" title="十二、选择器的权重"></a>十二、选择器的权重</h2><pre><code>     选中同一个元素        -样式的冲突            -当我们通过不同的选择器选中相同的元素，并且为相同的样式设置不同的值，此时发生样式冲突        发生样式冲突:            优先级：                    内联样式                    id选择器                    类和伪类选择器                    元素选择器                    通配选择器：*                    继承:没有优先级        多个时；相加        分组选择器：单独计算，一个“，”一组            选择器的累加不会超过最大数量级：比如：类选择器不会大于id选择器        优先级一样时：自下而上        可以在某一个样式的后边添加：!important：最高优先级            -开发中慎用</code></pre><h2 id="十三、像素和百分比"><a href="#十三、像素和百分比" class="headerlink" title="十三、像素和百分比"></a>十三、像素和百分比</h2><pre><code>     长度单位：                像素                百分比：设置属性相当于父元素使用的百分比：这样父元素变，子元素也变                em:em是相对于元素的字体大小来计算的                    -1em = 1font-size                    -em会根据字体大小而改变                rem：rem相对于字体：root相对于根元素html的字体大小计算的</code></pre><h2 id="十四、RGB值"><a href="#十四、RGB值" class="headerlink" title="十四、RGB值"></a>十四、RGB值</h2><pre><code>    RGB:        -R        -G        —B    每一种颜色的范围0-255之间    也可以用百分数    语法：RGB（红，绿 ，蓝）    RGBA:        -A表示透明            -1表示完全不透明            0.5：半透明    十六进制的RGB值：        -语法:#红绿蓝        -浓度：00-ff        -如果颜色两位两位重复可以简写            #aabbcc--#abc    HSL,HSLA：        H：色相0-360        S：饱和度0-100%        L；亮度0-100%        都是写百分比的：必须写</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客已打包成apk</title>
      <link href="/2020/042835377.html"/>
      <url>/2020/042835377.html</url>
      
        <content type="html"><![CDATA[<p>博客已打包成apk<br>链接：<a href="https://pan.baidu.com/s/1NUq2-hf4oK2f3T1TgG6ckQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1NUq2-hf4oK2f3T1TgG6ckQ</a><br>提取码：reuw</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> VIP视频解析网站源码（放到coding就可用）</title>
      <link href="/2020/042718991.html"/>
      <url>/2020/042718991.html</url>
      
        <content type="html"><![CDATA[<h1 id="VIP视频解析网站（本地-coding可用）"><a href="#VIP视频解析网站（本地-coding可用）" class="headerlink" title="VIP视频解析网站（本地+coding可用）"></a>VIP视频解析网站（本地+coding可用）</h1><p>体验连接<a href="http://cszar4.coding-pages.com" target="_blank" rel="noopener">VIP视频解析</a><br>不建议手机观看，因为接口不是我自己的所以广告我拦不住</p><p><img src="https://s1.ax1x.com/2020/04/27/JfKBTI.png" alt="JfKBTI.png"></p><p>链接：<a href="https://pan.baidu.com/s/1H-en7yaGBvnsPZqHISPHlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1H-en7yaGBvnsPZqHISPHlA</a><br>提取码：6h53</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIP </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取网页图片</title>
      <link href="/2020/042463275.html"/>
      <url>/2020/042463275.html</url>
      
        <content type="html"><![CDATA[<h1 id="python爬取网页图片源代码"><a href="#python爬取网页图片源代码" class="headerlink" title="python爬取网页图片源代码"></a>python爬取网页图片源代码</h1><pre><code>import requestsfrom bs4 import BeautifulSoupurl = "    "#发送源代码response = requests.get(url)#response=200:没毛病# print(response)#指定编码集response.encoding = 'utf-8'#获取源码# print(response.text)#把源代码交给beautifulmain_page = BeautifulSoup(response.text,"html.parser")#find：找# 1.find(标签，attrs={属性，值})：找一个# 2.find_all（标签，attrs={属性，值}）：找一堆alist = main_page.find("div",attrs={"class":"TypeList"}).find_all("a",attrs={"class":"TypeBigPics"})for a in alist:    href = a.get("href")    child_resp = requests.get(href) # 请求到子页面    #设置字符集    child_resp.encoding = "utf-8"    child_page = BeautifulSoup(child_resp.text,"html.parser") # 子页面提取内容    img = child_page.find("div",attrs={"id":"ArticleId8"}).find("img")    # print(img.get("src")) #拿到路径    title = child_page.find('div',attrs={"class":"ArticleTitle"}).text    #下载图片    f = open("%s.jpg" % title, mode='wb')    f.write(requests.get(img.get("src")).content)    print(1)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章编辑后台搭建</title>
      <link href="/2020/042423408.html"/>
      <url>/2020/042423408.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客后台搭建"><a href="#Hexo博客后台搭建" class="headerlink" title="Hexo博客后台搭建"></a>Hexo博客后台搭建</h1><iframe frameborder="no" bordered="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28208212&amp;auto=1&amp;height=66"></iframe><h2 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h2><pre><code> hexo-admin 是一个Hexo博客引擎的管理用户界面插件。这个插件最初是作为本地编辑器设计的，在本地运行hexo使用hexo-admin编写文章，然后通过hexo g或hexo d（hexo g是本地渲染，hexo d是将渲染的静态页面发布到GitHub）将生成的静态页面发布到GitHub等静态服务器。如果你使用的是非静态托管服务器，比如自己买的主机搭建的hexo，那么一定要设置hexo-admin 的密码，否则谁都可以编辑你的文章。</code></pre><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><p><img src="https://s1.ax1x.com/2020/04/24/JDZBTI.png" alt="JDZBTI.png"></p><p><img src="https://s1.ax1x.com/2020/04/24/JDeicD.png" alt="JDeicD.png"></p><h2 id="三、插件安装"><a href="#三、插件安装" class="headerlink" title="三、插件安装"></a>三、插件安装</h2><p>1.首先进入hexo创建的博客项目的根目录下，执行</p><pre><code>npm install --save hexo-admin</code></pre><p>2.运行下列命令启动hexo-admin </p><pre><code>hexo server -d</code></pre><p>3.打开<code>http://localhost:4000/admin/</code>就可以访问到hexo-admin管理页面了。</p><p><img src="https://s1.ax1x.com/2020/04/24/JDZBTI.png" alt="JDZBTI.png"></p><h2 id="四、密码保护"><a href="#四、密码保护" class="headerlink" title="四、密码保护"></a>四、密码保护</h2><p>打开<code>setting</code>，点击<code>Setup authentification here</code>输入用户名，密码，密钥，<code>设置完后下面会自动生成配置文件</code>，复制加在hexo根目录下的_config.yml中：</p><pre><code>admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something</code></pre><p><img src="https://s1.ax1x.com/2020/04/24/JDm9Vs.png" alt="JDm9Vs.png"></p><p>重启<code>hexo</code>，就可以看到登录页面了</p><h2 id="五、发布文章"><a href="#五、发布文章" class="headerlink" title="五、发布文章"></a>五、发布文章</h2><p><img src="https://s1.ax1x.com/2020/04/24/JDQDKK.png" alt="JDQDKK.png"><br>1、进入后台之后点击<code>Deploy</code>，里面的<code>Deploy</code>按钮是用来执行发布脚本的，所以我们先在博客<code>根目录</code>下新建<code>hexo-pubish.bat</code>(名字任意后缀<code>bat</code>)文件</p><p><img src="https://s1.ax1x.com/2020/04/24/JDmuZ9.png" alt="JDmuZ9.png"></p><p>然后填入如下代码</p><pre><code>hexo g -d</code></pre><p>然后在_config.yml中的admin下添加<code>deployCommand: 'hexo-pubish.bat'</code>(和之前创建的文件名相同)</p><pre><code>admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something  deployCommand: 'hexo-pubish.bat'</code></pre><p>设置发布执行的脚本，点击<code>Deploy</code>就会执行这个命令并提交到GitHub上。</p><p><img src="https://s1.ax1x.com/2020/04/24/JDnzAs.png" alt="JDnzAs.png"></p><p>开始提交：<br><img src="https://s1.ax1x.com/2020/04/24/JDKZM8.png" alt="JDKZM8.png"></p><p>成功如下：<br><img src="https://s1.ax1x.com/2020/04/24/JDKDRx.png" alt="JDKDRx.png"></p><h2 id="六、其他建议：添加一键本地运行"><a href="#六、其他建议：添加一键本地运行" class="headerlink" title="六、其他建议：添加一键本地运行"></a>六、其他建议：添加一键本地运行</h2><p>根目录下新建文件<code>hexo-s.bat</code><br><img src="https://s1.ax1x.com/2020/04/24/JDuljO.png" alt="JDuljO.png"></p><p>输入如下代码：</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s </code></pre><p>这样双击<code>hexo-s.bat</code>就可以直接本地查看了，很方便<br><img src="https://s1.ax1x.com/2020/04/24/JDuIrF.png" alt="JDuIrF.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 后台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python操作数据库</title>
      <link href="/2020/04233337.html"/>
      <url>/2020/04233337.html</url>
      
        <content type="html"><![CDATA[<h1 id="python操作数据库"><a href="#python操作数据库" class="headerlink" title="python操作数据库"></a>python操作数据库</h1><p><a href="https://imgchr.com/i/JDFRCF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/24/JDFRCF.jpg" alt="JDFRCF.jpg"></a></p><h2 id="第一章：为什么要数据库-gt-数据量大-方便管理"><a href="#第一章：为什么要数据库-gt-数据量大-方便管理" class="headerlink" title="第一章：为什么要数据库->数据量大,方便管理"></a>第一章：为什么要数据库-&gt;数据量大,方便管理</h2><pre><code>    sqlite:嵌入式数据库,数据库就是一个文件    mysql:开源</code></pre><h3 id="第一节-数据库编程接口"><a href="#第一节-数据库编程接口" class="headerlink" title="第一节:数据库编程接口"></a>第一节:数据库编程接口</h3><pre><code>    OB_API:数据库标准规范：PEP249:API规范</code></pre><h4 id="1-连接对象：connect-函数创建"><a href="#1-连接对象：connect-函数创建" class="headerlink" title="1.连接对象：connect()函数创建"></a>1.连接对象：connect()函数创建</h4><pre><code>    参数：        dsn：数据源名称        user：用户名        password：用户密码        host：主机名        datebase：数据库名</code></pre><h5 id="1-connect的常用方法"><a href="#1-connect的常用方法" class="headerlink" title="1.connect的常用方法"></a>1.connect的常用方法</h5><pre><code>    方法：    cursor():获取游标对象    commit():提交事务    rollback():回滚事务    close():关闭数据库连接</code></pre><h5 id="2-事务：转钱失败-回滚"><a href="#2-事务：转钱失败-回滚" class="headerlink" title="2.事务：转钱失败-回滚"></a>2.事务：转钱失败-回滚</h5><h4 id="2-游标对象cursor"><a href="#2-游标对象cursor" class="headerlink" title="2.游标对象cursor"></a>2.游标对象cursor</h4><pre><code>    方法：    callproc：调用存储过程    close：关闭    execute：执行数据库操作    executemany：批量执行    fechone：获取查询结果下一条    fechmany：获取指定数量    fechall：获取结构集的所有记录    nextset：跳至下一个结果集</code></pre><h4 id="3-先关闭cur再关闭connect"><a href="#3-先关闭cur再关闭connect" class="headerlink" title="3.先关闭cur再关闭connect"></a>3.先关闭cur再关闭connect</h4><h3 id="第二节：创建数据库文件"><a href="#第二节：创建数据库文件" class="headerlink" title="第二节：创建数据库文件"></a>第二节：创建数据库文件</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架matery主题+github搭建个人博客</title>
      <link href="/2020/042219999.html"/>
      <url>/2020/042219999.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo框架-github搭建个人博客"><a href="#hexo框架-github搭建个人博客" class="headerlink" title="hexo框架+github搭建个人博客"></a>hexo框架+github搭建个人博客</h1><p><img src="https://s1.ax1x.com/2020/04/22/JN7gcq.jpg" alt="坏蛋先生"></p><h2 id="一、hexo简介"><a href="#一、hexo简介" class="headerlink" title="一、hexo简介"></a>一、hexo简介</h2><p>1、Hexo 是一个快速、简洁且高效的博客框架。</p><p>2、官网入口及api：<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></p><p>3、Hexo 是基于nodejs的框架</p><p>4、可以配置在很多地方：github、gitee、coding等</p><h2 id="二、nodejs安装配置"><a href="#二、nodejs安装配置" class="headerlink" title="二、nodejs安装配置"></a>二、nodejs安装配置</h2><p>1、Hexo是基于nodeJS环境的静态博客，需要用到nodejs中的npm安装（npm安装nodejs时自动安装）</p><p>2、下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a>推荐LTS (说明：LTS为长期支持版，Current为当前最新版)</p><p>3、安装步骤：下载好msi文件,一路next</p><p>4、验证安装:<code>win + r</code>输入 <code>cmd</code> 进入命令行窗口输入如下命令出现版本号安装成功：<br>    <code>$ node -v</code></p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>1、<code>你的用户名.github.io</code>   比如: 如果你的github用户名是<code>test</code>，那么你就新建<code>test.github.io的仓库</code>（必须是你的用户名）</p><p>2、新建<code>readerme</code>文件，什么都不用添加</p><p>3、访问：<code>你的用户名.github.io</code>（不出现404就行）</p><h2 id="三、git安装配置"><a href="#三、git安装配置" class="headerlink" title="三、git安装配置"></a>三、git安装配置</h2><p>1、<a href="https://git-scm.com/" target="_blank" rel="noopener">下载git</a></p><p>2、安装git（除图片这一步选第二个其他都next）<br>3、因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识，用户和邮箱为你github注册的账号和邮箱右键打开git-bash.exe<br><code>$ git config --global user.name "你的github用户名"</code><br><code>$ git config --global user.email "你注册github的邮箱"</code><br><img src="https://s1.ax1x.com/2020/04/22/JNHwx1.png" alt=""></p><p>4、为Github账户设置<code>SSH key</code>(ssh key是加密传输)<br>    首先检查是否生成了秘钥,如果没有生成，那么通过如下命令：<br>    <code>$ ssh-keygen -t rsa -C “你的github注册邮箱”</code>        </p><pre><code>1.是路径确认，直接按回车存默认路径即可2.直接回车键，这里我们不使用密码进行登录, 用密码太麻烦3.直接回车键</code></pre><p><img src="https://s1.ax1x.com/2020/04/22/JNHqiQ.png" alt=""></p><p>5、可以打开你的电脑<code>C:\Users\Administrator.ssh</code>里面找到，生成成功后，可以查看 <code>id_rsa.pub</code> 公钥文件</p><p>6、为github账号配置<code>ssh_key</code>：setting—&gt;SSH and GPG keys<br> <img src="https://s1.ax1x.com/2020/04/22/JNbKoD.png" alt=""></p><p>7、验证是否成功输入如下代码：<br>    <code>$ ssh -T git@github.com</code><br>正常情况下会出现(有警告可以不用管)：<br>    <code>Hi Your Name! You've successfully authenticated, but GitHub does not provide shell access.</code></p><h2 id="四、hexo安装"><a href="#四、hexo安装" class="headerlink" title="四、hexo安装"></a>四、hexo安装</h2><h3 id="这里介绍两种方法安装："><a href="#这里介绍两种方法安装：" class="headerlink" title="这里介绍两种方法安装："></a>这里介绍两种方法安装：</h3><h4 id="1、正常安装"><a href="#1、正常安装" class="headerlink" title="1、正常安装"></a>1、正常安装</h4><p>(1)右键打开<code>git bash here</code>输入如下代码：<br>    <code>$ npm install -g hexo-cli</code><br>如下成功：<br><img src="https://s1.ax1x.com/2020/04/22/JNqxET.png" alt=""><br>(2)查看版本信息输入如下代码：<br>    <code>$ hexo -v</code><br><img src="https://s1.ax1x.com/2020/04/22/JNLM2d.jpg" alt=""><br>(3)初始化hexo程序任意你想要保存博客文件的位置(推荐桌面,文件名随意)输入代码：<br>    <code>$ hexo init myblog</code></p><p>(4)进入<code>myblog</code>查看文件目录</p><p>** node_modules: 依赖包<br>** scaffolds：生成文章的一些模板<br>** source：用来存放你的文章<br>** themes：主题<br>** _config.yml: 博客的配置文件<br>** package.json：项目所需模块项目的配置信息</p><p><img src="https://s1.ax1x.com/2020/04/22/JNLYa8.jpg" alt=""><br>(5)打开hexo,本地查看，文件夹中会出现public的静态博客文件夹<br>a.输入如下命令生成public静态网页文件夹<br><code>$ hexo g</code></p><p>b.输入如下命令，本地查看（在浏览器中输入localhost：4000查看）<br><code>$ hexo s</code> </p><h4 id="2、hexo-init命令无法正常执行安装"><a href="#2、hexo-init命令无法正常执行安装" class="headerlink" title="2、hexo init命令无法正常执行安装"></a>2、<code>hexo init</code>命令无法正常执行安装</h4><p>(1)<a href="https://pan.baidu.com/s/1uaabyjR2ZdnmfjLu1QIBQg" target="_blank" rel="noopener">下载hexo基本文件 提取码：fn26</a></p><pre><code>_config.yml package.json scaffolds/ source/ themes/</code></pre><p>(2)安装依赖<br><code>$ npm install</code><br><code>$ npm install hexo-deployer-git --save  // 文章部署到 git 的模块</code></p><p>(3)输入如下命令生成public文件<br><code>$ hexo g</code></p><p>(4)输入如下命令本地查看<br><code>hexo s</code></p><h2 id="五、测试发布原生主题到github"><a href="#五、测试发布原生主题到github" class="headerlink" title="五、测试发布原生主题到github"></a>五、测试发布原生主题到github</h2><h3 id="1、修改你的根目录-config-yml-配置文件如下："><a href="#1、修改你的根目录-config-yml-配置文件如下：" class="headerlink" title="1、修改你的根目录 _config.yml 配置文件如下："></a>1、修改你的根目录 _config.yml 配置文件如下：</h3><pre><code># 注意是git开头的仓库地址# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:flyoob/flyoob.github.io.git  branch: master</code></pre><p>如何获取仓库地址<br><img src="https://s1.ax1x.com/2020/04/22/JUFycV.png" alt=""><br><img src="https://s1.ax1x.com/2020/04/22/JUFqBD.png" alt=""></p><h3 id="2、修改url：你的github用户名-github-io"><a href="#2、修改url：你的github用户名-github-io" class="headerlink" title="2、修改url：你的github用户名.github.io"></a>2、修改url：<code>你的github用户名.github.io</code></h3><p><img src="https://s1.ax1x.com/2020/04/22/JUFESx.png" alt="">也可以是你自己绑定的域名</p><h3 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h3><pre><code>hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令hexo g       // 生成静态网页hexo d       // 开始部署</code></pre><h3 id="2、访问：你的用户名-github-io查看"><a href="#2、访问：你的用户名-github-io查看" class="headerlink" title="2、访问：你的用户名.github.io查看"></a>2、访问：<code>你的用户名.github.io</code>查看</h3><h2 id="六、下载matery主题"><a href="#六、下载matery主题" class="headerlink" title="六、下载matery主题"></a>六、下载matery主题</h2><h4 id="matery"><a href="#matery" class="headerlink" title="matery"></a><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a></h4><h2 id="七、配置matery主题"><a href="#七、配置matery主题" class="headerlink" title="七、配置matery主题"></a>七、配置matery主题</h2><h3 id="1-解压缩后，将hexo-theme-matery的文件夹复制到你-Hexo-的themes文件夹中即可。"><a href="#1-解压缩后，将hexo-theme-matery的文件夹复制到你-Hexo-的themes文件夹中即可。" class="headerlink" title="(1) 解压缩后，将hexo-theme-matery的文件夹复制到你 Hexo 的themes文件夹中即可。"></a>(1) 解压缩后，将<code>hexo-theme-matery</code>的文件夹复制到你 <code>Hexo</code> 的<code>themes</code>文件夹中即可。</h3><h3 id="2-切换主题"><a href="#2-切换主题" class="headerlink" title="(2) 切换主题"></a>(2) 切换主题</h3><pre><code>    修改 `Hexo `根目录下的` _config.yml `的 `theme `的值：`theme: hexo-theme-matery`</code></pre><h3 id="3-config-yml文件的其它修改建议"><a href="#3-config-yml文件的其它修改建议" class="headerlink" title="(3)_config.yml文件的其它修改建议:"></a>(3)<code>_config.yml</code>文件的其它修改建议:</h3><pre><code>请修改 _config.yml 的 url 的值为你的网站主 `URL（如：http://xxx.github.io）`。建议修改两个 `per_page `的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。如果你是中文用户，则建议修改 language 的值为` zh-CN`</code></pre><h3 id="4-新建分类-categories-页-注意页面上的分类不用你自己写，而是你在写文章时给文章写，matery会自己生成分类、标签"><a href="#4-新建分类-categories-页-注意页面上的分类不用你自己写，而是你在写文章时给文章写，matery会自己生成分类、标签" class="headerlink" title="(4)新建分类 categories 页(注意页面上的分类不用你自己写，而是你在写文章时给文章写，matery会自己生成分类、标签)"></a>(4)新建分类 <code>categories</code> 页(<code>注意页面上的分类不用你自己写，而是你在写文章时给文章写，matery会自己生成分类、标签</code>)</h3><p><code>categories</code>页是用来展示所有分类的页面，如果在你的博客 <code>source</code>目录下还没有 <code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：<br><code>hexo new page "categories"</code><br>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h3 id="5-新建标签-tags-页"><a href="#5-新建标签-tags-页" class="headerlink" title="(5)新建标签 tags 页"></a>(5)新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：<br><code>hexo new page "tags"</code><br>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h3 id="6-新建关于我-about-页"><a href="#6-新建关于我-about-页" class="headerlink" title="(6)新建关于我 about 页"></a>(6)新建关于我 <code>about</code> 页</h3><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 <code>source</code>目录下还没有<code>about/index.md</code>文件，那么你就需要新建一个，命令如下：<br><code>hexo new page "about"</code><br>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h3 id="7-新建友情连接-friends页（可选的）"><a href="#7-新建友情连接-friends页（可选的）" class="headerlink" title="(7)新建友情连接 friends页（可选的）"></a>(7)新建友情连接 <code>friends</code>页（可选的）</h3><p><code>friends</code> 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有<code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：<br><code>hexo new page "friends"</code><br>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code>目录，在 <code>_data</code>目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code>[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "ttps://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h3 id="8-代码高亮"><a href="#8-代码高亮" class="headerlink" title="(8)代码高亮"></a>(8)代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：<br><code>npm i -S hexo-prism-plugin</code><br>然后，修改 <code>Hexo</code>根目录下 <code>_config.yml</code> 文件中<code>highlight.enable</code> 的值为 <code>false</code>，并新增<code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code>highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="9-搜索"><a href="#9-搜索" class="headerlink" title="(9)搜索"></a>(9)搜索</h3><p>本主题中还使用到了 <code>hexo-generator-search</code> 的 <code>Hex</code>o 插件来做内容搜索，安装命令如下：<br><code>npm install hexo-generator-search --save</code><br>在 <code>Hexo</code>根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="10-中文链接转拼音（可选的）"><a href="#10-中文链接转拼音（可选的）" class="headerlink" title="(10)中文链接转拼音（可选的）"></a>(10)中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用<code>hexo-permalink-pinyin Hexo</code>插件使在生成文章时生成中文拼音的永久链接。<br>安装命令如下：<br><code>npm i hexo-permalink-pinyin --save</code><br>在 <code>Hexo</code>根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h3 id="11-文章字数统计插件（可选的）"><a href="#11-文章字数统计插件（可选的）" class="headerlink" title="(11)文章字数统计插件（可选的）"></a>(11)文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <code>hexo-wordcount</code>插件。<br>安装命令如下：<br><code>npm i --save hexo-wordcount</code><br>然后只需在本主题下的 <code>_config.yml</code>文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h3 id="12-添加-RSS-订阅支持（可选的）"><a href="#12-添加-RSS-订阅支持（可选的）" class="headerlink" title="(12)添加 RSS 订阅支持（可选的）"></a>(12)添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <code>hexo-generator-feed</code> 的 <code>Hexo</code> 插件来做<code>RSS</code>，安装命令如下：<br><code>npm install hexo-generator-feed --save</code><br>在<code>Hexo</code>根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行<code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code>文件，说明你已经安装成功了。</p><h3 id="13-修改社交链接-主题中本来就有不用复制粘贴，源代码中修改即可"><a href="#13-修改社交链接-主题中本来就有不用复制粘贴，源代码中修改即可" class="headerlink" title="(13)修改社交链接(主题中本来就有不用复制粘贴，源代码中修改即可)"></a>(13)修改社交链接(<code>主题中本来就有不用复制粘贴，源代码中修改即可</code>)</h3><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;a href="https://github.com/blinkfox" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;    &lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;/a&gt;</code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在<code>Font Awesome</code>中搜索找到。以下是常用社交图标的标识，供你参考：</p><pre><code>    Facebook: fa-facebook    Twitter: fa-twitter    Google-plus: fa-google-plus    Linkedin: fa-linkedin    Tumblr: fa-tumblr    Medium: fa-medium    Slack: fa-slack    新浪微博: fa-weibo    微信: fa-wechat    QQ: fa-qq    注意: 本主题中使用的 Font Awesome 版本为 4.7.0。</code></pre><h3 id="14-修改打赏的二维码图片"><a href="#14-修改打赏的二维码图片" class="headerlink" title="(14)修改打赏的二维码图片"></a>(14)修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="15-配置音乐播放器（可选的）"><a href="#15-配置音乐播放器（可选的）" class="headerlink" title="(15)配置音乐播放器（可选的）"></a>(15)配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre><code>[{    "name": "五月雨变奏电音",    "artist": "AnimeVibe",    "url": "http://xxx.com/music1.mp3",    "cover": "http://xxx.com/music-cover1.png"}, {    "name": "Take me hand",    "artist": "DAISHI DANCE,Cecile Corbel",    "url": "/medias/music/music2.mp3",    "cover": "/medias/music/cover2.png"}, {    "name": "Shape of You",    "artist": "J.Fla",    "url": "http://xxx.com/music3.mp3",    "cover": "http://xxx.com/music-cover3.png"}]</code></pre><p>注：以上 <code>JSON</code>中的属性：<code>name、artist、url、cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。<br>然后，在主题的 <code>_config.yml</code>配置文件中激活配置即可：</p><pre><code># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre><h3 id="16-文章-Front-matter介绍-阅读文章时显示的信息"><a href="#16-文章-Front-matter介绍-阅读文章时显示的信息" class="headerlink" title="(16)文章 Front-matter介绍(阅读文章时显示的信息)"></a>(16)文章 <code>Front-matter</code>介绍(阅读文章时显示的信息)</h3><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h2 id="八、优化matery主题"><a href="#八、优化matery主题" class="headerlink" title="八、优化matery主题"></a>八、优化matery主题</h2><h3 id="1-修改主题颜色"><a href="#1-修改主题颜色" class="headerlink" title="(1)修改主题颜色"></a>(1)修改主题颜色</h3><p>在主题文件的<code>/source/css/matery.css</code>文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h3 id="2-修改-banner图和文章特色图-只要名字命名一样就行，图过大加载慢，图小不清晰图片批量压缩（密码：yvb5）"><a href="#2-修改-banner图和文章特色图-只要名字命名一样就行，图过大加载慢，图小不清晰图片批量压缩（密码：yvb5）" class="headerlink" title="(2)修改 banner图和文章特色图(只要名字命名一样就行，图过大加载慢，图小不清晰图片批量压缩（密码：yvb5）)"></a>(2)修改 <code>banner</code>图和文章特色图(只要名字命名一样就行，图过大加载慢，图小不清晰<a href="https://pan.baidu.com/s/1DlxWnHm5GLiopsJ21wkKyg" target="_blank" rel="noopener">图片批量压缩（密码：yvb5）</a>)</h3><p>你可以直接在 <code>/source/medias/banner</code>文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，</p><p><code>banner</code>切换的代码位置在 /<code>layout/_partial/bg-cover-content.ejs</code>文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><p><code>$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></p><p>在<code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><h3 id="3-添加emoji表情支持（可选的）"><a href="#3-添加emoji表情支持（可选的）" class="headerlink" title="(3)添加emoji表情支持（可选的）"></a>(3)添加emoji表情支持（可选的）</h3><p>本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下：<br><code>npm install hexo-filter-github-emojis --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h3 id="4-给文章添加valine评论功能"><a href="#4-给文章添加valine评论功能" class="headerlink" title="(4)给文章添加valine评论功能"></a>(4)给文章添加valine评论功能</h3><p>进入主题文件的配置文件themes\matery_config.yml启用valine，其中需要设置Appid和appkey。此两项需要到<br><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud官网</a><br><img src="https://s1.ax1x.com/2020/04/22/JNz2i6.jpg" alt=""><br>注册和身份验证通过后，新建应用，名字随意起。<br><img src="https://s1.ax1x.com/2020/04/22/JNzjSS.jpg" alt=""></p><p>再将信息填入</p><pre><code>valine:enable: trueappid: your app idappkey: your app keynotify: false # mail notifier , https://github.com/xCss/Valine/wikiverify: false # Verification codeplaceholder: just so soguest_info: nick,mail,linkpageSize: 10</code></pre><h3 id="5-修改头部幻灯片滤镜颜色和透明度"><a href="#5-修改头部幻灯片滤镜颜色和透明度" class="headerlink" title="(5)修改头部幻灯片滤镜颜色和透明度"></a>(5)修改头部幻灯片滤镜颜色和透明度</h3><p>打开matery.css，找到450行左右(建议直接注释掉，不好看)<br><img src="https://s1.ax1x.com/2020/04/22/JUSNmd.png" alt=""></p><h3 id="6-添加樱花飘落效果"><a href="#6-添加樱花飘落效果" class="headerlink" title="(6)添加樱花飘落效果"></a>(6)添加樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/sakura.js" target="_blank" rel="noopener">传送门</a>，将内容复制粘贴到sakura.js即可。</p><p>然后再themes/matery/layout/layout.ejs文件内添加下面的内容：</p><pre><code>&lt;script type="text/javascript"&gt;//只在桌面版网页启用特效var windowWidth = $(window).width();if (windowWidth &gt; 768) {    document.write('&lt;script type="text/javascript" src="/js/sakura.js"&gt;&lt;\/script&gt;');}&lt;/script&gt;</code></pre><h3 id="7-添加雪花飘落效果"><a href="#7-添加雪花飘落效果" class="headerlink" title="(7)添加雪花飘落效果"></a>(7)添加雪花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>snow.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/snow.js" target="_blank" rel="noopener">传送门</a>，将内容复制粘贴到<code>snow.js</code>即可。<br>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre><code>&lt;script src="/js/snow.js"&gt;&lt;/script&gt;</code></pre><h3 id="8-文章生成永久链接-提交github时会自动生成"><a href="#8-文章生成永久链接-提交github时会自动生成" class="headerlink" title="(8)文章生成永久链接(提交github时会自动生成)"></a>(8)文章生成永久链接(提交github时会自动生成)</h3><p>主题默认的文章链接配置是<br><code>permalink: :year/:month/:day/:title</code><br>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。<br>首先再根目录下执行下面的命令：<br><code>npm install hexo-abbrlink --save</code><br>然后再根目录yml文件下添加如下配置：</p><pre><code>abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><p>然后再根目录yml文件下<code>permalink</code>的值修改为：<br><code>permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code><br>生成完后，原md文件的Front-matter 内会增加abbrlink 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h2 id="提交github（剧终）"><a href="#提交github（剧终）" class="headerlink" title="提交github（剧终）"></a>提交github（剧终）</h2><pre><code>hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令hexo g       // 生成静态网页hexo d       // 开始部署</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2020/042254657.html"/>
      <url>/2020/042254657.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记</title>
      <link href="/2020/042247896.html"/>
      <url>/2020/042247896.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/2020/042250736.html"/>
      <url>/2020/042250736.html</url>
      
        <content type="html"><![CDATA[<h1 id="html学习笔记"><a href="#html学习笔记" class="headerlink" title="html学习笔记"></a>html学习笔记</h1><h2 id="一、实体"><a href="#一、实体" class="headerlink" title="一、实体"></a>一、实体</h2><pre><code>1.使用实体的原因：多个空格只认一个空格只认一个        2.在html中不能书写特殊符号：空格，大于小于        3.如果需要书写特殊符号那么就需要特殊符号：实体        4.实体的语法            &amp;实体的没名字                &amp;nbsp；：表示空格                &amp;gt；：大于号                &amp;lt：小于号                &amp;copy；：版权符号        5.怎样查询实体：w3school实体</code></pre><h2 id="二、meta标签"><a href="#二、meta标签" class="headerlink" title="二、meta标签"></a>二、meta标签</h2><pre><code>    1.meta主要用于表示元数据，元数据不给用户看    2.charset 指定网页字符集    3.name 指定数据名字    4.content 指定数据内容        keywords:表示网页关键字，可以设置多个关键字，用“，”隔开        description：网站描述会显示在搜索描述里面    5.title标签的内容：超链接上的标签显示  *********************将页面重定义到另一个网站</code></pre><h2 id="三、语义化标签"><a href="#三、语义化标签" class="headerlink" title="三、语义化标签"></a>三、语义化标签</h2><p>网页中html负责网页结构，<br>            在使用时应该关注语义而不是样式</p><pre><code>        标题标签            h1~h6            h1只有一个            一般情况下标题只用到h1~h3        块元素：在页面中独占一行block element            hgtoup:用来给标签分组           &lt;hgroup&gt;                    &lt;h1&gt;一级标题&lt;/h1&gt;                    &lt;h2&gt;二级标题&lt;/h2&gt;                 &lt;/hgroup&gt;        em标签：用于语音语调加重                  行内元素：不会独占一行:inline element            &lt;!-- strong :表示强调重要内容--&gt;            &lt;p&gt;你今天不需要&lt;strong&gt;完成作业&lt;/strong&gt;&lt;/p&gt;      blockquote:表示长引用，换行      鲁迅说：      &lt;blockquote&gt;          这句话我没说过      &lt;/blockquote&gt;      &lt;!-- 不换行：行标签 --&gt;      鲁迅说：      &lt;q&gt;          这句话我没说过      &lt;/q&gt;      &lt;!-- br --&gt;      &lt;br&gt;      这句话我没说过      &lt;!-- 乱码处理，点击utf-8 --&gt;    块元素 block element        --对页面进行布局，一块一块的    行内元素 inline element        --行内元素主要用来包裹文字        --一般情况下在块元素中放行内元素        --块元素中基本什么都能放        --p元素中不能放任何块元素    浏览器在解析网站时会修正不符合规范的内容    比如：        -标签写在外部        -p元素中嵌套了块元素        -根元素中出现了除了head，body以外的子元素    浏览器开发工具：element右键查看：内存中的代码存在 &lt;!--     布局标签（结构化语义）    header:头部    main:主体,一个页面只有一个    footer:尾部    nav:导航：一堆分类那块    aside：主体相关的不属于主体的内容    article：独立文章    section：独立区块：上面的标签都不能表示时    *div：没有语义，表示区块：目前来讲的主要布局元素    *span:行内元素,没有语义，主要用于选中文字 --&gt;</code></pre><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><pre><code> &lt;!--     列表:list        -铅笔        -尺子        -橡皮    在html中也可以创建列表：        -有序列表        -无序列表        -定义列表        ul：无序列表            -使用li来表示列表项        ol：有序列表            -li        dl：定义序列            dt来表示定义内容            dd来解释说明        列表之间可以互相嵌套            ul中套ul --&gt;</code></pre><h2 id="五、超链接"><a href="#五、超链接" class="headerlink" title="五、超链接"></a>五、超链接</h2><pre><code>超链接：a标签：（行内标签）    -属性：href：指定跳转路径        -值可以是外部网站地址        -可以是内部页面地址：同一目录下就可以超链接a标签是行内标签，在a标签中可以嵌套除它自生外的任何元素</code></pre><h2 id="六、相对路径"><a href="#六、相对路径" class="headerlink" title="六、相对路径"></a>六、相对路径</h2><pre><code>    跳转服务器内部页面时要相对路径：       ./或../开头       可以省略       ./:表示当前文件所在目录            09.相对路径.html            在同一目录下可以不写       ../：上一级目录中查找       读当前，读下一级，读上一级;</code></pre><h2 id="七、超链接的其他应用"><a href="#七、超链接的其他应用" class="headerlink" title="七、超链接的其他应用"></a>七、超链接的其他应用</h2><pre><code> a标签的属性值：        target:指定超链接打开的位置:新标签            -_self 默认值:当前标签页            -_blank 新的页面中打开标签页 &lt;a href="#bottom"&gt;去底部&lt;/a&gt; &lt;a href="09.相对路径.html" target="_blank"&gt;超链接&lt;/a&gt;  回到顶部：        id属性:唯一不重复的            -每一个标签都可以添加id属性,唯一标识,同一个页面中不能相同出现id属性            -字母开头        可以跳转到指定位置:#标签 在开发中可以用：        -#去代表一个占位符会刷新页面        -javascript:;占位符,不会发生任何反应</code></pre><h2 id="八、图片标签"><a href="#八、图片标签" class="headerlink" title="八、图片标签"></a>八、图片标签</h2><pre><code>    图片标签:当前页面引入图片        img:自结束标签            属性                src：指定路径                img属于替换元素：img所引用的外部元素替换img                alt：图片属性,默认不会显示，无法加载时可能会显示                搜索引擎会按alt来识别图片                width：宽度                hight：高度                只修改一个：等比缩放                通常指定一个就行            注意：不建议修改图片大小                 移动端经常修改    图片的格式：        jpg:颜色多，不支持透明，不支持动图            -表示照片        gif:支持颜色少，支持简单透明，支持动图            -颜色单一的图片，动图        png:支持颜色丰富，支持复杂透明，不支持动图            -颜色丰富，复杂透明        webp:            谷歌新推出网页的图片格式            具备其他格式的所有有点，文件还小            效果一样用小的，效果不同用好的            兼容不好也可以复制图片代码直接等号后面       base64        -将图片用base64编码，这样可以将字符转换为字符，通过字符形式引入图片        -一般都是和网页一起加载的图片才会使用，不会出现延迟，加载速度快</code></pre><h2 id="九、内敛样式"><a href="#九、内敛样式" class="headerlink" title="九、内敛样式"></a>九、内敛样式</h2><pre><code>    iframe    内联框架：用于当前页面中引入别的网站        -src：网页路径        -frameborder：指定内联框架的边框：不好看            -会产生凹下去的外框，不好看                -1：打开                -0：关闭</code></pre><h2 id="十、音视频"><a href="#十、音视频" class="headerlink" title="十、音视频"></a>十、音视频</h2><pre><code>    audio:像页面中引入音频文件    属性：        -controls：是否允许用户控制        -autoplay：自动播放            -如果设置，打开页面时会自动播放，目前大部分浏览器不会自动播放            -先播放一次之后就可以自动播放了，IE可以        loop:循环播放    除了scr指定文件之外;还可以用scorce来指定文件        -指定多个文件，不会全部执行，找一个支持的    embed:老版本的播放，自动播放，第二次会变很小：指定宽高        -type：指定类型    video：引入视频文件    属性：        -autoplay        -loop        -音频通常用source，这样兼容性好 一般不用这种绝对路径的方法         allowFullScreen="true"：全屏         一般引入：和之前一样：</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 网页开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C个人学习笔记</title>
      <link href="/2020/042012132.html"/>
      <url>/2020/042012132.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-学生成绩管理系统</title>
      <link href="/2020/042013214.html"/>
      <url>/2020/042013214.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-贪吃蛇</title>
      <link href="/2020/042013548.html"/>
      <url>/2020/042013548.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站导航</title>
      <link href="/2020/042027176.html"/>
      <url>/2020/042027176.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIP </tag>
            
            <tag> 资源 </tag>
            
            <tag> 网站 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 破解 </tag>
            
            <tag> 素材库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件资源</title>
      <link href="/2020/042027176.html"/>
      <url>/2020/042027176.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
            <tag> 破解 </tag>
            
            <tag> 软件 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
